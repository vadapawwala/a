Assignment 1

1. Write a python program to implement Simple Chatbot.

import random

# Define responses
responses = {
    "hi": ["Hello!", "Hi there!", "Hey!"],
    "how are you?": ["I'm doing well, thank you!", "I'm good, thanks for asking.", "All good, thanks!"],
    "what's your name?": ["I'm just a humble chatbot!", "I don't really have a name, I'm just here to help."],
    "bye": ["Goodbye!", "See you later!", "Take care!"],
    "default": ["I'm not sure how to respond to that.", "Could you please rephrase that?", "I didn't quite catch that."]
}

# Function to get response
def get_response(message):
    message = message.lower()
    if message in responses:
        return random.choice(responses[message])
    else:
        return random.choice(responses["default"])

# Main function
def main():
    print("Welcome! Type 'bye' to exit.")
    while True:
        user_input = input("You: ")
        if user_input.lower() == 'bye':
            print(get_response('bye'))
            break
        else:
            print("Chatbot:", get_response(user_input))

if _name_ == "_main_":
    main()





2. Write a python program to implement Breadth First Search Traversal.



from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)
        
    def bfs(self, start):
        visited = set()
        queue = [start]

        while queue:
            vertex = queue.pop(0)
            if vertex not in visited:
                print(vertex, end=" ")
                visited.add(vertex)
                queue.extend(self.graph[vertex])


graph = Graph()
graph.add_edge(0, 1)
graph.add_edge(0, 2)
graph.add_edge(1, 3)
graph.add_edge(2, 3)

start_vertex = 1
print("BFS Traversal starting from vertex", start_vertex, ":")
graph.bfs(start_vertex)







3. Write a python program to implement Depth First Search Traversal.


from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)
    def dfs_util(self, vertex, visited):
        visited.add(vertex)
        print(vertex, end=" ")

        for neighbor in self.graph[vertex]:
            if neighbor not in visited:
                self.dfs_util(neighbor, visited)

    def dfs(self, start):
        visited = set()
        self.dfs_util(start, visited)

# Example Usage:
graph = Graph()
graph.add_edge(0, 1)
graph.add_edge(0, 2)
graph.add_edge(1, 3)
graph.add_edge(2, 3)


start_vertex = 1
print("DFS Traversal starting from vertex", start_vertex, ":")
graph.dfs(start_vertex)




4. Write a python program to implement a Water Jug Problem. ( Consider two
jugs A and B , the capacity of A is four and the capacity of B is 3 , the target
value is 2)



def water_jug_problem(capacity_a, capacity_b, target):
    state_a, state_b = 0, 0  # Initial states of the jugs
    print(f"Initial State: Jug A={state_a}, Jug B={state_b}")

    while state_a != target or state_b != target:
        # Fill jug A to its full capacity
        if state_a < capacity_a:
            state_a = capacity_a
            print(f"Fill Jug A: Jug A={state_a}, Jug B={state_b}")

        # Pour water from jug A to jug B
        pour = min(state_a, capacity_b - state_b)
        state_a -= pour
        state_b += pour
        print(f"Pour water from Jug A to Jug B: Jug A={state_a}, Jug B={state_b}")

        # Check if the target is reached
        if state_a == target or state_b == target:
            break

        # Empty jug B
        if state_b == capacity_b:
            state_b = 0
            print(f"Empty Jug B: Jug A={state_a}, Jug B={state_b}")
            
            
        # Pour water from jug B to jug A
        #pour = min(state_b, capacity_a - state_a)
        #state_a += pour
        #state_b -= pour
        #print(f"Pour water from Jug B to Jug A: Jug A={state_a}, Jug B={state_b}")

        
        # Pour water from jug A to jug B
        pour = min(state_a, capacity_b - state_b)
        state_a -= pour
        state_b += pour
        print(f"Pour water from Jug A to Jug B: Jug A={state_a}, Jug B={state_b}")
        

    print(f"Target reached! Jug A={state_a}, Jug B={state_b}")


if __name__ == "__main__":
    water_jug_problem(4, 3, 2)






Set B (Practice Assignment)
1. Write a python program to implement Best First Search Traversal.




import heapq

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v, weight=None):
        if u not in self.graph:
            self.graph[u] = []
        if v not in self.graph:
            self.graph[v] = []

        # Assuming default weight of 1 if not provided
        weight = weight if weight is not None else 1

        self.graph[u].append((v, weight))
        self.graph[v].append((u, weight))  

    def best_first_search(self, start, goal, heuristic_values):
        visited = set()
        priority_queue = [(heuristic_values[start], start)]  # Priority queue to store (priority, node) pairs

        while priority_queue:
            _, current_node = heapq.heappop(priority_queue)
            print(current_node, end=' ')

            if current_node == goal:
                print("\nGoal reached!")
                return

            visited.add(current_node)

            for neighbor, weight in self.graph[current_node]:
                if neighbor not in visited:
                    heapq.heappush(priority_queue, (heuristic_values[neighbor], neighbor))

# Example Usage:
if __name__ == "__main__":
    g = Graph()
    g.add_edge('A', 'B')
    g.add_edge('A', 'C')
    g.add_edge('B', 'D')
    g.add_edge('B', 'E')
    g.add_edge('C', 'F')
    g.add_edge('D', 'G')
    g.add_edge('E', 'H')
    g.add_edge('F', 'I')

    start_node = 'A'
    goal_node = 'G'
    
    heuristic_values = {
        'A': 12,
        'B': 8,
        'C': 15,
        'D': 1,
        'E': 8,
        'F': 8,
        'G': 7,
        'H': 5,
        'I': 0
    }

    print(f"Best-First Search Traversal from {start_node} to {goal_node}:")
    g.best_first_search(start_node, goal_node, heuristic_values)

